buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
    }
}

version "0.1"
group "functionaltests"

apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin:"com.energizedwork.webdriver-binaries"

assets {
    minifyJs = true
    minifyCss = true
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core"
    compile "org.hibernate:hibernate-ehcache"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding:$scaffoldingVersion"

    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    runtime "org.grails.plugins:fields:$fieldsVersion"
    runtime "org.apache.tomcat:tomcat-jdbc"

    testCompile "org.grails:grails-web-testing-support:$testingSupportVersion"
    testCompile "org.grails:grails-gorm-testing-support:$testingSupportVersion"

    console "org.grails:grails-console"
    testCompile "io.micronaut:micronaut-http-client:$micronautVersion"

    compile project(':loadfirst')
    compile project(':loadsecond')
    compile project(':loadafter')
}

apply from: "${rootProject.projectDir}/gradle/geb.gradle"

tasks.withType(org.gradle.api.tasks.JavaExec) {
    systemProperty('REPLACE_ME', 'test')
    systemProperty('foo.bar', 'test')
    // jvmArgs '-javaagent:agent.jar'
}
test {
    systemProperty('REPLACE_ME', 'test')
    systemProperty('foo.bar', 'test')
}

//compileTestGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
//compileGroovy.groovyOptions.fork = true
//compileGroovy.groovyOptions.forkOptions.jvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
